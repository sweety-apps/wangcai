package com.example.wangcai.ctrls;


import android.content.Context;
import android.os.AsyncTask;
import android.util.AttributeSet;
import android.util.Log;
import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.WindowManager;
import android.widget.RelativeLayout;


public class SlidingLayout extends RelativeLayout implements android.view.View.OnTouchListener {  
    public static final int SNAP_VELOCITY = 200;  		//滚动显示和隐藏左侧布局时，手指滑动需要达到的速度。 
  
    public static final int DO_NOTHING = 0;		//滑动状态的一种，表示未进行任何滑动。 
  
    public static final int SHOW_LEFT_VIEW = 1;		//滑动状态的一种，表示正在滑出左侧菜单。 
    public static final int SHOW_RIGHT_VIEW = 2;	 //滑动状态的一种，表示正在滑出右侧菜单。  
    public static final int HIDE_LEFT_VIEW = 3;	//滑动状态的一种，表示正在隐藏左侧菜单。      
    public static final int HIDE_RIGHT_VIEW = 4;		//滑动状态的一种，表示正在隐藏右侧菜单。 
  
    private int m_slideState;		//记录当前的滑动状态
    
    private int m_screenWidth;  //屏幕宽度值。
  
    private int m_touchSlop;  //在被判定为滚动之前用户手指可以移动的最大值。
  
    private float m_xDown;  //记录手指按下时的横坐标。
    private float m_yDown;  //记录手指按下时的纵坐标。
    private float m_xMove;  //记录手指移动时的横坐标。
    private float m_yMove;  //记录手指移动时的纵坐标。
  
    private float m_xUp;  //记录手机抬起时的横坐标。
    
    private boolean m_isLeftViewVisible;  //左侧菜单当前是显示还是隐藏。只有完全显示或隐藏时才会更改此值，滑动过程中此值无效。
    private boolean m_isRightViewVisible;  //右侧菜单当前是显示还是隐藏。只有完全显示或隐藏时才会更改此值，滑动过程中此值无效。
   
    private boolean m_isSliding;  //是否正在滑动。
  
    private View m_leftViewLayout;  //左侧菜单布局对象。
    private View m_rightViewLayout;  //右侧菜单布局对象。
  
    private View m_contentLayout;  //内容布局对象。
   
    private View m_mBindView;  //用于监听滑动事件的View。
    
    private MarginLayoutParams m_leftViewLayoutParams;  //左侧菜单布局的参数。
    private MarginLayoutParams m_rightViewLayoutParams;  //右侧菜单布局的参数。
    private RelativeLayout.LayoutParams m_contentLayoutParams;  //内容布局的参数。

    private VelocityTracker m_mVelocityTracker;  //用于计算手指滑动的速度。
  
    
    //重写BidirSlidingLayout的构造函数，其中获取了屏幕的宽度和touchSlop的值。 
      
    public SlidingLayout(Context context, AttributeSet attrs) {  
        super(context, attrs);
        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);  
        m_screenWidth = wm.getDefaultDisplay().getWidth();  
        m_touchSlop = ViewConfiguration.get(context).getScaledTouchSlop();  
    }  
  
    
    //绑定监听滑动事件的View。 
    public void setScrollEvent(View bindView) {  
        m_mBindView = bindView;  
        m_mBindView.setOnTouchListener(this);  
    }  
      
    //将界面滚动到左侧菜单界面，滚动速度设定为-30. 
    public void scrollToLeftView() {  
        new LeftViewScrollTask().execute(-30);  
    }  
  
    
    //将界面滚动到右侧菜单界面，滚动速度设定为-30. 
    public void scrollToRightView() {
    	if (m_rightViewLayout != null && m_rightViewLayoutParams != null) {
    		new RightViewScrollTask().execute(-30);  
    	}
    }  
    
    //将界面从左侧菜单滚动到内容界面，滚动速度设定为30. 
    public void scrollToContentFromLeftView() {  
    		new LeftViewScrollTask().execute(30);
    }  
  
    
    //将界面从右侧菜单滚动到内容界面，滚动速度设定为30. 
    public void scrollToContentFromRightView() {  
    	if (m_rightViewLayout != null && m_rightViewLayoutParams != null) {
    		new RightViewScrollTask().execute(30);
    	}
    }  
  
    
    //左侧菜单是否完全显示出来，滑动过程中此值无效。 
    //@return 左侧菜单完全显示返回true，否则返回false。
    public boolean isLeftLayoutVisible() {  
        return m_isLeftViewVisible;  
    }  
  
    
    //右侧菜单是否完全显示出来，滑动过程中此值无效。 
    //@return 右侧菜单完全显示返回true，否则返回false。 
    public boolean isRightLayoutVisible() {  
        return m_isRightViewVisible;  
    }  
    
    //在onLayout中重新设定左侧菜单、右侧菜单、以及内容布局的参数。 
    @Override  
    protected void onLayout(boolean changed, int l, int t, int r, int b) {  
        super.onLayout(changed, l, t, r, b);  
        if (changed) {  
            // 获取左侧菜单布局对象  
            m_leftViewLayout = getChildAt(0);  
            m_leftViewLayoutParams = (MarginLayoutParams) m_leftViewLayout.getLayoutParams();  
            
			// 获取内容布局对象  
            m_contentLayout = getChildAt(1);  
            m_contentLayoutParams = (RelativeLayout.LayoutParams) m_contentLayout.getLayoutParams();  
            m_contentLayoutParams.width = m_screenWidth;  
            m_contentLayout.setLayoutParams(m_contentLayoutParams);  

            // 获取右侧菜单布局对象  
            m_rightViewLayout = getChildAt(2);
			if (m_rightViewLayout != null) {
				m_rightViewLayoutParams = (MarginLayoutParams) m_rightViewLayout.getLayoutParams();  
			}
        }
    }  
  
    public boolean onTouch(View v, MotionEvent event) {  
        createVelocityTracker(event);  
        int nAction = event.getAction();
        switch (nAction) {  
        case MotionEvent.ACTION_DOWN:  
            // 手指按下时，记录按下时的坐标  
            m_xDown = event.getRawX();  
            m_yDown = event.getRawY();  
            // 将滑动状态初始化为DO_NOTHING  
            m_slideState = DO_NOTHING;  
            break;  
        case MotionEvent.ACTION_MOVE:  
            m_xMove = event.getRawX();  
            m_yMove = event.getRawY();  
            // 手指移动时，对比按下时的坐标，计算出移动的距离。  
            int moveDistanceX = (int) (m_xMove - m_xDown);  
            int moveDistanceY = (int) (m_yMove - m_yDown);  
            // 检查当前的滑动状态  
            checkSlideState(moveDistanceX, moveDistanceY);  
            // 根据当前滑动状态决定如何偏移内容布局  
            switch (m_slideState) {  
            case SHOW_LEFT_VIEW:  
                m_contentLayoutParams.rightMargin = -moveDistanceX;  
                checkLeftViewBorder();  
                m_contentLayout.setLayoutParams(m_contentLayoutParams);  
                break;  
            case HIDE_LEFT_VIEW:  
                m_contentLayoutParams.rightMargin = -m_leftViewLayoutParams.width - moveDistanceX;  
                checkLeftViewBorder();  
                m_contentLayout.setLayoutParams(m_contentLayoutParams);  
            case SHOW_RIGHT_VIEW:  
                m_contentLayoutParams.leftMargin = moveDistanceX;  
                checkRightViewBorder();  
                m_contentLayout.setLayoutParams(m_contentLayoutParams);  
                break;  
            case HIDE_RIGHT_VIEW:  
				if (m_rightViewLayoutParams != null) {
	                m_contentLayoutParams.leftMargin = -m_rightViewLayoutParams.width + moveDistanceX;  
				}
				checkRightViewBorder();  
                m_contentLayout.setLayoutParams(m_contentLayoutParams);  
            default:  
                break;  
            }  
            break;  
        case MotionEvent.ACTION_UP:  
            m_xUp = event.getRawX();  
            int upDistanceX = (int) (m_xUp - m_xDown);  
            if (m_isSliding) {  
                // 手指抬起时，进行判断当前手势的意图  
                switch (m_slideState) {  
	                case SHOW_LEFT_VIEW:  
	                    if (shouldScrollToLeftView()) {  
	                        scrollToLeftView();  
	                    } else {  
	                        scrollToContentFromLeftView();  
	                    }  
	                    break;  
	                case HIDE_LEFT_VIEW:  
	                    if (shouldScrollToContentFromLeftView()) {  
	                        scrollToContentFromLeftView();  
	                    } else {  
	                        scrollToLeftView();  
	                    }  
	                    break;  
	                case SHOW_RIGHT_VIEW:  
	                    if (shouldScrollToRightView()) {  
	                        scrollToRightView();  
	                    } else {  
	                        scrollToContentFromRightView();  
	                    }  
	                    break;  
	                case HIDE_RIGHT_VIEW:  
	                    if (shouldScrollToContentFromRightView()) {  
	                        scrollToContentFromRightView();  
	                    } else {  
	                        scrollToRightView();  
	                    }  
	                    break;  
	                default:  
	                    break;  
                }  
            } else if (upDistanceX < m_touchSlop && m_isLeftViewVisible) {  
                // 当左侧菜单显示时，如果用户点击一下内容部分，则直接滚动到内容界面  
                scrollToContentFromLeftView();  
            } else if (upDistanceX < m_touchSlop && m_isRightViewVisible) {  
                // 当右侧菜单显示时，如果用户点击一下内容部分，则直接滚动到内容界面  
                scrollToContentFromRightView();  
            }  
            recycleVelocityTracker();  
            break;  
        }  
        /*
        if (v.isEnabled()) {  
            if (m_isSliding) {  
                // 正在滑动时让控件得不到焦点  
                unFocusBindView();  
                return true;  
            }  
            if (m_isLeftViewVisible || m_isRightViewVisible) {  
                // 当左侧或右侧布局显示时，将绑定控件的事件屏蔽掉  
                return true;  
            }  
            return false;  
        }  
		*/       
        return true;  
    }  
  
    
    //根据手指移动的距离，判断当前用户的滑动意图，然后给slideState赋值成相应的滑动状态值。 
    private void checkSlideState(int moveDistanceX, int moveDistanceY) {  
        if (m_isLeftViewVisible) {  
            if (!m_isSliding && Math.abs(moveDistanceX) >= m_touchSlop && moveDistanceX < 0) {  
                m_isSliding = true;  
                m_slideState = HIDE_LEFT_VIEW;  
            }  
        } else if (m_isRightViewVisible) {  
            if (!m_isSliding && Math.abs(moveDistanceX) >= m_touchSlop && moveDistanceX > 0) {  
                m_isSliding = true;  
                m_slideState = HIDE_RIGHT_VIEW;  
            }  
        } else {  
            if (!m_isSliding && Math.abs(moveDistanceX) >= m_touchSlop && 
            		moveDistanceX > 0 && 
            		Math.abs(moveDistanceY) < m_touchSlop) {  
                m_isSliding = true;  
                m_slideState = SHOW_LEFT_VIEW;  
                m_contentLayoutParams.addRule(RelativeLayout.ALIGN_PARENT_LEFT, 0);  
                m_contentLayoutParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);  
                m_contentLayout.setLayoutParams(m_contentLayoutParams);  
                // 如果用户想要滑动左侧菜单，将左侧菜单显示，右侧菜单隐藏  
                m_leftViewLayout.setVisibility(View.VISIBLE);  
				if (m_rightViewLayout != null) {
			       m_rightViewLayout.setVisibility(View.GONE);  
				}
            } else if (!m_isSliding && Math.abs(moveDistanceX) >= m_touchSlop && 
            		moveDistanceX < 0 && 
            		Math.abs(moveDistanceY) < m_touchSlop) {  
                m_isSliding = true;  
                m_slideState = SHOW_RIGHT_VIEW;  
                m_contentLayoutParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT, 0);  
                m_contentLayoutParams.addRule(RelativeLayout.ALIGN_PARENT_LEFT);  
                m_contentLayout.setLayoutParams(m_contentLayoutParams);  
                // 如果用户想要滑动右侧菜单，将右侧菜单显示，左侧菜单隐藏
				if (m_rightViewLayout != null) {
	                m_rightViewLayout.setVisibility(View.VISIBLE);
				}
				m_leftViewLayout.setVisibility(View.GONE);  
            }  
        }  
    }  
  
    
    //在滑动过程中检查左侧菜单的边界值，防止绑定布局滑出屏幕。 
      
    private void checkLeftViewBorder() {  
        if (m_contentLayoutParams.rightMargin > 0) {  
            m_contentLayoutParams.rightMargin = 0;  
        } else if (m_contentLayoutParams.rightMargin < -m_leftViewLayoutParams.width) {  
            m_contentLayoutParams.rightMargin = -m_leftViewLayoutParams.width;  
        }  
    }  
  
    
    //在滑动过程中检查右侧菜单的边界值，防止绑定布局滑出屏幕。 
      
    private void checkRightViewBorder() {  
		int nRightViewRight = 0;
		if (m_rightViewLayoutParams != null) {
			nRightViewRight = m_rightViewLayoutParams.width;
		}
        if (m_contentLayoutParams.leftMargin > 0) {  
            m_contentLayoutParams.leftMargin = 0;  
        } else if (m_contentLayoutParams.leftMargin < -nRightViewRight) {  
            m_contentLayoutParams.leftMargin = -nRightViewRight;  
        }  
    }  
  
    
    //判断是否应该滚动将左侧菜单展示出来。如果手指移动距离大于左侧菜单宽度的1/2，或者手指移动速度大于SNAP_VELOCITY， 
    //就认为应该滚动将左侧菜单展示出来。
    private boolean shouldScrollToLeftView() {  
        return m_xUp - m_xDown > m_leftViewLayoutParams.width / 2 || getScrollVelocity() > SNAP_VELOCITY;  
    }  
  
    //判断是否应该滚动将右侧菜单展示出来。如果手指移动距离大于右侧菜单宽度的1/2，或者手指移动速度大于SNAP_VELOCITY， 
    //就认为应该滚动将右侧菜单展示出来。 
    private boolean shouldScrollToRightView() {
		 if (m_rightViewLayoutParams == null) {
			 return false;
		 }
        return m_xDown - m_xUp > m_rightViewLayoutParams.width / 2 || getScrollVelocity() > SNAP_VELOCITY;  
    }  
  
    
    //判断是否应该从左侧菜单滚动到内容布局，如果手指移动距离大于左侧菜单宽度的1/2，或者手指移动速度大于SNAP_VELOCITY， 
    //就认为应该从左侧菜单滚动到内容布局。 
    private boolean shouldScrollToContentFromLeftView() {  
        return m_xDown - m_xUp > m_leftViewLayoutParams.width / 2 || getScrollVelocity() > SNAP_VELOCITY;  
    }  
  
    
    //判断是否应该从右侧菜单滚动到内容布局，如果手指移动距离大于右侧菜单宽度的1/2，或者手指移动速度大于SNAP_VELOCITY， 
    //就认为应该从右侧菜单滚动到内容布局。 
    private boolean shouldScrollToContentFromRightView() {  
		 if (m_rightViewLayoutParams == null) {
			 return false;
		 }
        return m_xUp - m_xDown > m_rightViewLayoutParams.width / 2 || getScrollVelocity() > SNAP_VELOCITY;  
    }  
   
    //创建VelocityTracker对象，并将触摸事件加入到VelocityTracker当中。
    private void createVelocityTracker(MotionEvent event) {  
        if (m_mVelocityTracker == null) {  
            m_mVelocityTracker = VelocityTracker.obtain();  
        }  
        m_mVelocityTracker.addMovement(event);  
    }  
  
    //获取手指在绑定布局上的滑动速度。 
    private int getScrollVelocity() {  
        m_mVelocityTracker.computeCurrentVelocity(1000);  
        int velocity = (int) m_mVelocityTracker.getXVelocity();  
        return Math.abs(velocity);  
    }  
   
    //回收VelocityTracker对象。
    private void recycleVelocityTracker() {  
        m_mVelocityTracker.recycle();  
        m_mVelocityTracker = null;  
    }  
  
    
    //使用可以获得焦点的控件在滑动的时候失去焦点。
    private void unFocusBindView() {  
        if (m_mBindView != null) {  
            m_mBindView.setPressed(false);  
            m_mBindView.setFocusable(false);  
            m_mBindView.setFocusableInTouchMode(false);  
        }  
    }  
  
    class LeftViewScrollTask extends AsyncTask<Integer, Integer, Integer> {
        @Override  
        protected Integer doInBackground(Integer... speed) {  
            int rightMargin = m_contentLayoutParams.rightMargin;  
            int nLayoutWidth = m_leftViewLayoutParams.width;
            // 根据传入的速度来滚动界面，当滚动到达边界值时，跳出循环。  
            while (true) {  
                rightMargin = rightMargin + speed[0];
                if (rightMargin < -nLayoutWidth) {  
                    rightMargin = -nLayoutWidth;  
                    break;  
                }  
                if (rightMargin > 0) {  
                    rightMargin = 0;  
                    break;  
                }  
                Log.i("doInBackground",  String.format("rightMargin(%d)", rightMargin));
                publishProgress(rightMargin);  
                sleep(15);  
            }  
            if (speed[0] > 0) {  
                m_isLeftViewVisible = false;  
            } else {  
                m_isLeftViewVisible = true;  
            }  
            m_isSliding = false;  
            Log.i("doInBackground",  String.format("TaskEnd: rightMargin(%d)", rightMargin));
            return rightMargin;  
        }  
  
        @Override  
        protected void onProgressUpdate(Integer... rightMargin) {  
            m_contentLayoutParams.rightMargin = rightMargin[0];  
            Log.i("onProgressUpdate",  String.format("TaskEnd: rightMargin(%d)", rightMargin[0]));
            m_contentLayout.setLayoutParams(m_contentLayoutParams);  
            unFocusBindView();  
        }  
  
        @Override  
        protected void onPostExecute(Integer rightMargin) {  
            m_contentLayoutParams.rightMargin = rightMargin;  
            Log.i("onPostExecute",  String.format("TaskEnd: rightMargin(%d)", rightMargin));
            m_contentLayout.setLayoutParams(m_contentLayoutParams);  
        }  
    }  
  
    class RightViewScrollTask extends AsyncTask<Integer, Integer, Integer> {  
  
        @Override  
        protected Integer doInBackground(Integer... speed) {  
            int leftMargin = m_contentLayoutParams.leftMargin;  
            // 根据传入的速度来滚动界面，当滚动到达边界值时，跳出循环。  
            while (true) {  
                leftMargin = leftMargin + speed[0];  
                if (leftMargin < -m_rightViewLayoutParams.width) {  
                    leftMargin = -m_rightViewLayoutParams.width;  
                    break;  
                }  
                if (leftMargin > 0) {  
                    leftMargin = 0;  
                    break;  
                }  
                publishProgress(leftMargin);    
                sleep(15);  
            }  
            if (speed[0] > 0) {  
                m_isRightViewVisible = false;  
            } else {  
                m_isRightViewVisible = true;  
            }  
            m_isSliding = false;  
            return leftMargin;  
        }  
  
        @Override  
        protected void onProgressUpdate(Integer... leftMargin) {  
            m_contentLayoutParams.leftMargin = leftMargin[0];  
            m_contentLayout.setLayoutParams(m_contentLayoutParams);  
            unFocusBindView();  
        }  
  
        @Override  
        protected void onPostExecute(Integer leftMargin) {  
            m_contentLayoutParams.leftMargin = leftMargin;  
            m_contentLayout.setLayoutParams(m_contentLayoutParams);  
        }  
    }  
 
    private void sleep(long millis) {  
        try {  
            Thread.sleep(millis);  
        } catch (InterruptedException e) {  
            e.printStackTrace();  
        }  
    }  
}  